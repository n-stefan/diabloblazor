@page "/"

<div id="main" class="App @(AppState.Started ? "started" : "") @(AppState.Dropping > 0 ? "dropping" : "")" @ondragenter="OnMainDragEnter" @ondragleave="OnMainDragLeave"
     @ondragover="OnMainDragOver" @ondragover:preventDefault="preventDefaultDragOver">
    <div class="Body">
        <div class="inner">
            @if (!AppState.Error)
            {
                <canvas id="canvas" width="640" height="480" tabindex="1" @oncontextmenu="OnCanvasContextMenu" @oncontextmenu:preventDefault
                        @onkeyup="OnCanvasKeyUp" @onkeydown="OnCanvasKeyDown" @onkeydown:preventDefault="preventDefaultKeyDown"
                        @onmousemove="OnCanvasMouseMove" @onmousedown="OnCanvasMouseDown" @onmouseup="OnCanvasMouseUp" />
            }
        </div>
    </div>
    <div class="BodyV">
        @if (AppState.ShowSaves)
        {
            <div class="start">
                <ul class="saveList">
                    @if (!AppState.Saves.Any())
                    {
                        @:There are no saves.
                    }
                    else
                    {
                        @:Saves:
                        foreach (var save in AppState.Saves)
                        {
                            <li @key="save.Name">
                                <div class="saveName">@save.ShortName</div><span class="info">@save.GameType</span>
                                <i class="btnDownload fa fa-download" @onclick="() => DownloadSave(save.Name)"></i>
                                <i class="btnRemove fa fa-times" @onclick="() => RemoveSave(save)"></i>
                            </li>
                        }
                    }
                </ul>
                <a @ref="downloadLink" class="hidden"></a>
                <label for="saveInput" class="startButton">Upload Save</label>
                <InputFile OnChange="@UploadSaveFile" accept=".sv" id="saveInput" class="hidden" />
                <div class="startButton" @onclick="GoBack">Back</div>
            </div>
        }
        else if (AppState.Loading && !AppState.Started)
        {
            <div class="loading">
                @(AppState.Progress.Message ?? "Initializing...")
                @if (AppState.Progress.Total != 0)
                {
                    <span class="progressBar"><span><span style="width: @AppState.Progress.PercentLoaded%" /></span></span>
                }
            </div>
        }
        else if (!AppState.Started)
        {
            <div class="start">
                <p>
                    Based on the excellent <a href="https://github.com/d07RiV/diabloweb">DiabloWeb</a> which, in turn, is based on the likewise excellent <a href="https://github.com/diasurgical/devilution">Devilution</a>.
                    The project page with information and links can be found here: <a href="https://github.com/n-stefan/diabloblazor">DiabloBlazor</a>.
                </p>
                <p>
                    If you own the original game, you can drop the original DIABDAT.MPQ onto this page or click the button below to start playing.
                    The game can be purchased from <a href="https://www.gog.com/game/diablo">GoG</a>.
                    @*<span class="link" @onclick="CompressMPQ">Click here to compress the MPQ, greatly reducing its size.</span>*@
                </p>
                @if (!AppState.HasSpawn)
                {
                    <p>
                        Or you can play the shareware version for free (25MB download).
                    </p>
                }
                <label for="mpqInput" class="startButton">Browse for DIABDAT.MPQ</label>
                <InputFile OnChange="@LoadMpqFile" accept=".mpq" id="mpqInput" class="hidden" />
                <div class="startButton" @onclick="() => Start()">Play Shareware</div>
                @if (AppState.Saves.Any())
                {
                    <div class="startButton" @onclick="ShowSaves">Manage Saves</div>
                }
                <p>Game render interval (milliseconds): <span class="highlight">@RenderInterval</span></p>
                <p>FPS target: <span class="highlight">@FPSTarget</span></p>
                <p><input type="range" min="15" max="100" step="1" @bind="RenderInterval" @bind:event="oninput" @onchange="OnRenderIntervalChange" /></p>
            </div>
        }
    </div>
</div>
